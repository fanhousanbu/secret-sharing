name: Coverage Report

on:
  pull_request:
    branches: [ main, master ]

permissions:
  pull-requests: write
  contents: read

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Parse coverage data
        id: coverage
        run: |
          # Use Node.js script to parse coverage data
          node scripts/parse-coverage.js
          
          # Read parsed data from JSON file
          if [ -f "coverage-data.json" ]; then
            STATEMENTS=$(node -e "console.log(require('./coverage-data.json').statements)")
            BRANCHES=$(node -e "console.log(require('./coverage-data.json').branches)")
            FUNCTIONS=$(node -e "console.log(require('./coverage-data.json').functions)")
            LINES=$(node -e "console.log(require('./coverage-data.json').lines)")
            
            echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
            echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
            echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
            echo "lines=$LINES" >> $GITHUB_OUTPUT
            
            echo "üìä Coverage extracted:"
            echo "  Statements: $STATEMENTS%"
            echo "  Branches: $BRANCHES%"
            echo "  Functions: $FUNCTIONS%"
            echo "  Lines: $LINES%"
          else
            echo "‚ùå Coverage data file not found"
            exit 1
          fi

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        with:
          script: |
            const statements = '${{ steps.coverage.outputs.statements }}';
            const branches = '${{ steps.coverage.outputs.branches }}';
            const functions = '${{ steps.coverage.outputs.functions }}';
            const lines = '${{ steps.coverage.outputs.lines }}';
            
            // Determine status emoji and color
            const statementsNum = parseFloat(statements);
            const status = statementsNum >= 65 ? '‚úÖ' : '‚ùå';
            
            const comment = `## üìä Test Coverage Report
            
            | Metric | Coverage | Threshold | Status |
            |--------|----------|-----------|--------|
            | **Statements** | ${statements}% | 65% | ${statementsNum >= 65 ? '‚úÖ' : '‚ùå'} |
            | **Branches** | ${branches}% | 50% | ${parseFloat(branches) >= 50 ? '‚úÖ' : '‚ùå'} |
            | **Functions** | ${functions}% | 55% | ${parseFloat(functions) >= 55 ? '‚úÖ' : '‚ùå'} |
            | **Lines** | ${lines}% | 65% | ${parseFloat(lines) >= 65 ? '‚úÖ' : '‚ùå'} |
            
            **Overall Status**: ${status} ${statementsNum >= 65 ? 'Coverage meets requirements' : 'Coverage below requirements'}
            
            ---
            *This report is automatically generated by GitHub Actions*
            `;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('‚úÖ Coverage comment added successfully');
            } catch (error) {
              console.log('‚ö†Ô∏è Failed to add comment:', error.message);
              console.log('This might be due to permissions or the PR being closed');
            } 