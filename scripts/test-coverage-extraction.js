#!/usr/bin/env node

/**
 * Test script to simulate coverage data extraction from coverage-badge.yml
 */

const { execSync } = require('child_process');

console.log('🧪 Testing coverage data extraction...\n');

try {
  // Simulate the coverage-badge.yml workflow
  console.log('1. Running tests with coverage...');
  const output = execSync('npm run test:cov', { 
    encoding: 'utf8',
    stdio: 'pipe'
  });

  console.log('2. Extracting coverage data...');
  
  // Parse coverage percentages (same logic as in workflow)
  const coverageMatch = output.match(/All files\s+\|\s+(\d+\.\d+)\s+\|\s+(\d+\.\d+)\s+\|\s+(\d+\.\d+)\s+\|\s+(\d+\.\d+)/);
  
  if (coverageMatch) {
    const [, statements, branches, functions, lines] = coverageMatch;
    
    console.log('✅ Coverage data extracted successfully:');
    console.log(`   Statements: ${statements}%`);
    console.log(`   Branches: ${branches}%`);
    console.log(`   Functions: ${functions}%`);
    console.log(`   Lines: ${lines}%`);
    
    // Test the PR comment generation
    console.log('\n3. Testing PR comment generation...');
    
    const statementsNum = parseFloat(statements);
    const status = statementsNum >= 65 ? '✅' : '❌';
    
    const comment = `## 📊 Test Coverage Report

| Metric | Coverage | Threshold | Status |
|--------|----------|-----------|--------|
| **Statements** | ${statements}% | 65% | ${statementsNum >= 65 ? '✅' : '❌'} |
| **Branches** | ${branches}% | 50% | ${parseFloat(branches) >= 50 ? '✅' : '❌'} |
| **Functions** | ${functions}% | 55% | ${parseFloat(functions) >= 55 ? '✅' : '❌'} |
| **Lines** | ${lines}% | 65% | ${parseFloat(lines) >= 65 ? '✅' : '❌'} |

**Overall Status**: ${status} ${statementsNum >= 65 ? 'Coverage meets requirements' : 'Coverage below requirements'}

---
*This report is automatically generated by GitHub Actions*`;

    console.log('✅ PR comment generated successfully:');
    console.log(comment);
    
    // Test threshold checking
    console.log('\n4. Testing threshold validation...');
    const thresholds = {
      statements: 65,
      branches: 50,
      functions: 55,
      lines: 65
    };
    
    const results = {
      statements: parseFloat(statements) >= thresholds.statements,
      branches: parseFloat(branches) >= thresholds.branches,
      functions: parseFloat(functions) >= thresholds.functions,
      lines: parseFloat(lines) >= thresholds.lines
    };
    
    Object.entries(results).forEach(([key, passed]) => {
      const value = key === 'statements' ? statements : 
                   key === 'branches' ? branches :
                   key === 'functions' ? functions : lines;
      const threshold = thresholds[key];
      const status = passed ? '✅' : '❌';
      console.log(`${status} ${key}: ${value}% (threshold: ${threshold}%)`);
    });
    
    console.log('\n🎉 All tests passed! The workflow should work correctly.');
    
  } else {
    console.log('❌ Failed to parse coverage data');
    console.log('Raw output:', output);
    process.exit(1);
  }
  
} catch (error) {
  console.log('❌ Test failed:', error.message);
  process.exit(1);
} 