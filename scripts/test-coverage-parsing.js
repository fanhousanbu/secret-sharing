#!/usr/bin/env node

/**
 * Test script to verify coverage data parsing logic
 */

const { execSync } = require('child_process');

console.log('🧪 Testing coverage data parsing logic...\n');

try {
  // Run tests and capture output
  console.log('1. Running tests with coverage...');
  const output = execSync('npm run test:cov', { 
    encoding: 'utf8',
    stdio: 'pipe'
  });

  console.log('2. Testing the parsing logic...');
  
  // Simulate the bash parsing logic
  const coverageLine = output.match(/All files\s+\|\s+(\d+\.\d+)\s+\|\s+(\d+\.\d+)\s+\|\s+(\d+\.\d+)\s+\|\s+(\d+\.\d+)/);
  
  if (coverageLine) {
    const [, statements, branches, functions, lines] = coverageLine;
    
    console.log('✅ Parsing successful:');
    console.log(`   Statements: ${statements}%`);
    console.log(`   Branches: ${branches}%`);
    console.log(`   Functions: ${functions}%`);
    console.log(`   Lines: ${lines}%`);
    
    // Test the comment generation
    console.log('\n3. Testing comment generation...');
    
    const statementsNum = parseFloat(statements);
    const status = statementsNum >= 65 ? '✅' : '❌';
    
    const comment = `## 📊 Test Coverage Report

| Metric | Coverage | Threshold | Status |
|--------|----------|-----------|--------|
| **Statements** | ${statements}% | 65% | ${statementsNum >= 65 ? '✅' : '❌'} |
| **Branches** | ${branches}% | 50% | ${parseFloat(branches) >= 50 ? '✅' : '❌'} |
| **Functions** | ${functions}% | 55% | ${parseFloat(functions) >= 55 ? '✅' : '❌'} |
| **Lines** | ${lines}% | 65% | ${parseFloat(lines) >= 65 ? '✅' : '❌'} |

**Overall Status**: ${status} ${statementsNum >= 65 ? 'Coverage meets requirements' : 'Coverage below requirements'}

---
*This report is automatically generated by GitHub Actions*`;

    console.log('✅ Comment generated successfully:');
    console.log(comment);
    
    console.log('\n🎉 All tests passed! The workflow should work correctly.');
    
  } else {
    console.log('❌ Failed to parse coverage data');
    console.log('Raw output:', output);
    process.exit(1);
  }
  
} catch (error) {
  console.log('❌ Test failed:', error.message);
  process.exit(1);
} 